name: release

on:
  push:
    tags:
      - '*'

permissions:
  packages: write
  contents: write

env:
  APP_NAME: 'ytd'
  DENO_VERSION: 'v1.46'

jobs:
  build-artifact:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          # - ubuntu-latest
          # - windows-latest
          - macOS-latest
    steps:
      - uses: actions/checkout@v3
      # TODO: check version at deno.json and the tag
      #- name: Update constants
      #  run: |
      #    RELEASE_TAG=${GITHUB_REF#refs/*/}
      #    sed -i '' -e "s/export const Version.*/export const Version = '${RELEASE_TAG}';/g" src/constants.ts
      #    sed -i '' -e "s/export const Platform.*/export const Platform = '${{ runner.os }}';/g" src/constants.ts
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - run: |
          deno task build
          mv ytd ${{ env.APP_NAME }}_${{ matrix.os }}
      - name: Create artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-${{ matrix.os }}
          path: ${{ env.APP_NAME }}_${{ matrix.os }}

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-artifact
    steps:
      - uses: actions/checkout@v3
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
      # - name: Create Release
      #   id: create-release
      #   uses: ncipollo/release-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     artifacts: "${{ env.APP_NAME }}_*"
      #     body: "Release"
      #     draft: false # TODO: check tag and if it is a pre-release or not
      #     generateReleaseNotes: true


  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   asset_name_suffix: linux
          #   asset_content_type: application/x-pie-executable
          # - os: windows-latest
          #   asset_name_suffix: windows.exe
          #   asset_content_type: application/x-dosexec
          - os: macOS-latest
            asset_name_suffix: macos
            asset_content_type: application/x-mach-binary
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.os }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.APP_NAME }}_${{ matrix.os }}
          asset_name: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          tag: ${{ github.ref }}
          overwrite: true
          #body: 

      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.vars.outputs.upload_url }}
      #     asset_path: ${{ env.APP_NAME }}_${{ matrix.os }}
      #     asset_name: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
      #     asset_content_type: ${{ matrix.asset_content_type }}
